{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9633913,"sourceType":"datasetVersion","datasetId":5881848}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sheethalraghavan/spotify-analytics-features-streaming-impacts?scriptVersionId=201366654\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import ttest_ind\nimport numpy as np\n\n# Load your dataset\ndf = pd.read_csv('/kaggle/input/spotify-dataset/Spotify Most Streamed Songs.csv')\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-15T19:30:34.342364Z","iopub.execute_input":"2024-10-15T19:30:34.342862Z","iopub.status.idle":"2024-10-15T19:30:34.373612Z","shell.execute_reply.started":"2024-10-15T19:30:34.342818Z","shell.execute_reply":"2024-10-15T19:30:34.372456Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check missing values\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:37.477996Z","iopub.execute_input":"2024-10-15T19:30:37.478486Z","iopub.status.idle":"2024-10-15T19:30:37.488095Z","shell.execute_reply.started":"2024-10-15T19:30:37.478433Z","shell.execute_reply":"2024-10-15T19:30:37.486625Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill missing values in 'in_shazam_charts' with 'No\ndf['in_shazam_charts'].fillna('No', inplace=True)\n\n# Recheck missing values to confirm\nprint(df.isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:40.342327Z","iopub.execute_input":"2024-10-15T19:30:40.342781Z","iopub.status.idle":"2024-10-15T19:30:40.354695Z","shell.execute_reply.started":"2024-10-15T19:30:40.342727Z","shell.execute_reply":"2024-10-15T19:30:40.352954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check the unique values in 'key' column\nprint(df['key'].unique())","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:43.857533Z","iopub.execute_input":"2024-10-15T19:30:43.857982Z","iopub.status.idle":"2024-10-15T19:30:43.864841Z","shell.execute_reply.started":"2024-10-15T19:30:43.857938Z","shell.execute_reply":"2024-10-15T19:30:43.863388Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill missing values with mode (most common value)\ndf.fillna({'key': df['key'].mode()[0]}, inplace=True)\n\nprint(df.isnull().sum()) #checking for missing values","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:46.21201Z","iopub.execute_input":"2024-10-15T19:30:46.21287Z","iopub.status.idle":"2024-10-15T19:30:46.224612Z","shell.execute_reply.started":"2024-10-15T19:30:46.212822Z","shell.execute_reply":"2024-10-15T19:30:46.223421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.dtypes","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:48.912096Z","iopub.execute_input":"2024-10-15T19:30:48.913251Z","iopub.status.idle":"2024-10-15T19:30:48.92259Z","shell.execute_reply.started":"2024-10-15T19:30:48.91317Z","shell.execute_reply":"2024-10-15T19:30:48.921322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert 'streams' to numeric\ndf['streams'] = pd.to_numeric(df['streams'], errors='coerce')\n\n# Check if there are any missing or non-convertible values\nprint(df['streams'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:51.602511Z","iopub.execute_input":"2024-10-15T19:30:51.603783Z","iopub.status.idle":"2024-10-15T19:30:51.613672Z","shell.execute_reply.started":"2024-10-15T19:30:51.60372Z","shell.execute_reply":"2024-10-15T19:30:51.612238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Remove rows with missing values in 'streams'\ndf = df.dropna(subset=['streams'])\n\n# Check the number of missing values now\nprint(df['streams'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:53.753103Z","iopub.execute_input":"2024-10-15T19:30:53.75433Z","iopub.status.idle":"2024-10-15T19:30:53.765093Z","shell.execute_reply.started":"2024-10-15T19:30:53.754268Z","shell.execute_reply":"2024-10-15T19:30:53.763695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert 'in_deezer_playlists' to numeric\ndf['in_deezer_playlists'] = pd.to_numeric(df['in_deezer_playlists'], errors='coerce')\n\n# Check for any non-convertible values\nprint(df['in_deezer_playlists'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:55.682877Z","iopub.execute_input":"2024-10-15T19:30:55.68387Z","iopub.status.idle":"2024-10-15T19:30:55.693927Z","shell.execute_reply.started":"2024-10-15T19:30:55.683804Z","shell.execute_reply":"2024-10-15T19:30:55.692123Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill missing values with the median of 'in_deezer_playlists'\n\ndf.loc[:, 'in_deezer_playlists'] = df['in_deezer_playlists'].fillna(df['in_deezer_playlists'].median())\n\n# Check if there are still missing values\nprint(df['in_deezer_playlists'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:57.318126Z","iopub.execute_input":"2024-10-15T19:30:57.318639Z","iopub.status.idle":"2024-10-15T19:30:57.328676Z","shell.execute_reply.started":"2024-10-15T19:30:57.318595Z","shell.execute_reply":"2024-10-15T19:30:57.327409Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert 'in_shazam_charts' to numeric\ndf['in_shazam_charts'] = pd.to_numeric(df['in_shazam_charts'], errors='coerce')\n\n# Check for any non-convertible values\nprint(df['in_shazam_charts'].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:30:59.072421Z","iopub.execute_input":"2024-10-15T19:30:59.073846Z","iopub.status.idle":"2024-10-15T19:30:59.083968Z","shell.execute_reply.started":"2024-10-15T19:30:59.073721Z","shell.execute_reply":"2024-10-15T19:30:59.082168Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill missing values with the median of 'in_deezer_playlists'\n\ndf['in_shazam_charts'] = df['in_shazam_charts'].fillna(df['in_shazam_charts'].median())\n\n# Check if there are still missing values\nprint(df['in_shazam_charts'].isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:04.592828Z","iopub.execute_input":"2024-10-15T19:31:04.59382Z","iopub.status.idle":"2024-10-15T19:31:04.602558Z","shell.execute_reply.started":"2024-10-15T19:31:04.593769Z","shell.execute_reply":"2024-10-15T19:31:04.600857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert 'key' and 'mode' to a category type\ndf['key'] = df['key'].astype('category')\ndf['mode'] = df['mode'].astype('category')\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:06.417822Z","iopub.execute_input":"2024-10-15T19:31:06.418761Z","iopub.status.idle":"2024-10-15T19:31:06.428489Z","shell.execute_reply.started":"2024-10-15T19:31:06.418711Z","shell.execute_reply":"2024-10-15T19:31:06.427158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Check the data types after conversion\nprint(df.dtypes)","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:09.680901Z","iopub.execute_input":"2024-10-15T19:31:09.681919Z","iopub.status.idle":"2024-10-15T19:31:09.689554Z","shell.execute_reply.started":"2024-10-15T19:31:09.681866Z","shell.execute_reply":"2024-10-15T19:31:09.688266Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Remove duplicate values\ndf.drop_duplicates(subset=['track_name', 'artist(s)_name'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:12.621611Z","iopub.execute_input":"2024-10-15T19:31:12.622045Z","iopub.status.idle":"2024-10-15T19:31:12.632539Z","shell.execute_reply.started":"2024-10-15T19:31:12.622005Z","shell.execute_reply":"2024-10-15T19:31:12.63111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def remove_outliers(df, col):\n    \"\"\"\n    Removes outliers from a given column in the DataFrame using IQR method.\n    \n    Parameters:\n    - df: The dataframe\n    - col: The column name to check for outliers\n    \n    Returns:\n    - df: DataFrame with outliers removed from the specified column\n    \"\"\"\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n    IQR = Q3 - Q1\n    \n    # Calculate lower and upper bounds\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    \n    # Remove rows with outliers\n    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]\n    \n    return df\n\n# List of columns to check for outliers\nnumeric_cols = [\n    'artist_count', 'released_year', 'released_month', 'released_day',\n    'in_spotify_playlists', 'in_spotify_charts', 'streams', \n    'in_apple_playlists', 'in_apple_charts', 'in_deezer_playlists', \n    'in_deezer_charts', 'in_shazam_charts', 'bpm', 'danceability_%', \n    'valence_%', 'energy_%', 'acousticness_%', 'instrumentalness_%', \n    'liveness_%', 'speechiness_%'\n]\n\n# Loop through each numeric column and remove outliers\nfor col in numeric_cols:\n    df = remove_outliers(df, col)\n\n# Check the shape of the dataframe after removing outliers\nprint(\"Data shape after removing outliers:\", df.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:15.73633Z","iopub.execute_input":"2024-10-15T19:31:15.73679Z","iopub.status.idle":"2024-10-15T19:31:15.798675Z","shell.execute_reply.started":"2024-10-15T19:31:15.736745Z","shell.execute_reply":"2024-10-15T19:31:15.797333Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Exploratory Data Analysis (EDA)","metadata":{}},{"cell_type":"code","source":"# Get a summary of numerical columns\nprint(df.describe())","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:20.976168Z","iopub.execute_input":"2024-10-15T19:31:20.976635Z","iopub.status.idle":"2024-10-15T19:31:21.037815Z","shell.execute_reply.started":"2024-10-15T19:31:20.976593Z","shell.execute_reply":"2024-10-15T19:31:21.03656Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Top 10 Artists by strea,\ntop_artists = df.groupby('artist(s)_name')['streams'].sum().sort_values(ascending=False).head(10)\nprint(top_artists)","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:24.716391Z","iopub.execute_input":"2024-10-15T19:31:24.716882Z","iopub.status.idle":"2024-10-15T19:31:24.729726Z","shell.execute_reply.started":"2024-10-15T19:31:24.716835Z","shell.execute_reply":"2024-10-15T19:31:24.728169Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Top Genres or Playlists:\nin_spotify_playlists = df['in_spotify_playlists'].value_counts()\nprint(in_spotify_playlists)","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:27.286725Z","iopub.execute_input":"2024-10-15T19:31:27.287297Z","iopub.status.idle":"2024-10-15T19:31:27.298127Z","shell.execute_reply.started":"2024-10-15T19:31:27.287237Z","shell.execute_reply":"2024-10-15T19:31:27.29663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Replace infinite values with NaN directly without using inplace=True\ndf['streams'] = df['streams'].replace([np.inf, -np.inf], np.nan)\n\n# Streams Distributions\nplt.figure(figsize=(10,6))\nsns.histplot(df['streams'], bins=50, kde=True)\nplt.title('Distribution of Streams')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:29.956029Z","iopub.execute_input":"2024-10-15T19:31:29.956468Z","iopub.status.idle":"2024-10-15T19:31:30.411264Z","shell.execute_reply.started":"2024-10-15T19:31:29.956427Z","shell.execute_reply":"2024-10-15T19:31:30.409956Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Top 10 Artists by Streams (Bar Plot):\n\nplt.figure(figsize=(12,6))\ntop_artists.plot(kind='bar', color='orange')\nplt.title('Top 10 Artists by Streams')\nplt.xlabel('Artist')\nplt.ylabel('Total Streams')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:33.976473Z","iopub.execute_input":"2024-10-15T19:31:33.977027Z","iopub.status.idle":"2024-10-15T19:31:34.344544Z","shell.execute_reply.started":"2024-10-15T19:31:33.97697Z","shell.execute_reply":"2024-10-15T19:31:34.343155Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Investigate how numerical features are correlated\n\ncorrelation_matrix = df[['streams', 'danceability_%', 'energy_%', 'acousticness_%']].corr()\n\nplt.figure(figsize=(8,6))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\nplt.title('Correlation Matrix')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:37.131488Z","iopub.execute_input":"2024-10-15T19:31:37.131895Z","iopub.status.idle":"2024-10-15T19:31:37.538792Z","shell.execute_reply.started":"2024-10-15T19:31:37.131856Z","shell.execute_reply":"2024-10-15T19:31:37.537511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Statistical Analysis","metadata":{}},{"cell_type":"code","source":"# Finding Mean, Median, and Mode:\n\nprint(f\"Mean Streams: {df['streams'].mean()}\")\nprint(f\"Median Streams: {df['streams'].median()}\")\nprint(f\"Mode Streams: {df['streams'].mode()[0]}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:39.851409Z","iopub.execute_input":"2024-10-15T19:31:39.851863Z","iopub.status.idle":"2024-10-15T19:31:39.861291Z","shell.execute_reply.started":"2024-10-15T19:31:39.851818Z","shell.execute_reply":"2024-10-15T19:31:39.859677Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compare streams between songs in Spotify playlists vs. not in Spotify playlists.(T-Test)\nin_playlists = df[df['in_spotify_playlists'] == 'yes']['streams']\nnot_in_playlists = df[df['in_spotify_playlists'] == 'no']['streams']\n\nt_stat, p_val = ttest_ind(in_playlists, not_in_playlists)\nprint(f\"T-statistic: {t_stat}, P-value: {p_val}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:42.346046Z","iopub.execute_input":"2024-10-15T19:31:42.346971Z","iopub.status.idle":"2024-10-15T19:31:42.358032Z","shell.execute_reply.started":"2024-10-15T19:31:42.346921Z","shell.execute_reply":"2024-10-15T19:31:42.356794Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Group By and Aggregation:aggregate data by different features\nstreams_by_year = df.groupby('released_year')['streams'].sum()\nprint(streams_by_year)\n\n# Plot\nstreams_by_year.plot(kind='line', figsize=(10,6))\nplt.title('Total Streams Over the Years')\nplt.xlabel('Year')\nplt.ylabel('Total Streams')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:44.556314Z","iopub.execute_input":"2024-10-15T19:31:44.55676Z","iopub.status.idle":"2024-10-15T19:31:44.929839Z","shell.execute_reply.started":"2024-10-15T19:31:44.556706Z","shell.execute_reply":"2024-10-15T19:31:44.928522Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Top 10 song","metadata":{}},{"cell_type":"code","source":"# Group by track_name to get total streams per song\ntop_songs = df.groupby('track_name')['streams'].sum().sort_values(ascending=False).head(10)\n\n# Plot the top 10 songs by streams\nplt.figure(figsize=(12,6))\ntop_songs.plot(kind='bar', color='blue')\nplt.title('Top 10 Songs by Total Streams')\nplt.xlabel('Song')\nplt.ylabel('Total Streams')\nplt.xticks(rotation=90)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:49.846718Z","iopub.execute_input":"2024-10-15T19:31:49.847172Z","iopub.status.idle":"2024-10-15T19:31:50.175843Z","shell.execute_reply.started":"2024-10-15T19:31:49.847127Z","shell.execute_reply":"2024-10-15T19:31:50.174619Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Visually Analyze the Relationship Between Features like Danceability, Energy, Valence, and the Number of Streams\n","metadata":{}},{"cell_type":"code","source":"# Scatter plot of streams vs danceability\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='danceability_%', y='streams', data=df)\nplt.title('Danceability vs Streams')\nplt.xlabel('Danceability (%)')\nplt.ylabel('Streams')\nplt.show()\n\n# Scatter plot of streams vs energy\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='energy_%', y='streams', data=df)\nplt.title('Energy vs Streams')\nplt.xlabel('Energy (%)')\nplt.ylabel('Streams')\nplt.show()\n\n# Scatter plot of streams vs valence\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='valence_%', y='streams', data=df)\nplt.title('Valence vs Streams')\nplt.xlabel('Valence (%)')\nplt.ylabel('Streams')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:53.071275Z","iopub.execute_input":"2024-10-15T19:31:53.071695Z","iopub.status.idle":"2024-10-15T19:31:53.976299Z","shell.execute_reply.started":"2024-10-15T19:31:53.071656Z","shell.execute_reply":"2024-10-15T19:31:53.974974Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Streams over time(by Year)\n# Group by released_year to see total streams per year\nstreams_by_year = df.groupby('released_year')['streams'].sum()\n\n# Plot total streams by year\nplt.figure(figsize=(10,6))\nstreams_by_year.plot(kind='line', marker='o', color='purple')\nplt.title('Total Streams Over the Years')\nplt.xlabel('Year')\nplt.ylabel('Total Streams')\nplt.grid(True)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:31:58.226082Z","iopub.execute_input":"2024-10-15T19:31:58.226638Z","iopub.status.idle":"2024-10-15T19:31:58.607536Z","shell.execute_reply.started":"2024-10-15T19:31:58.226593Z","shell.execute_reply":"2024-10-15T19:31:58.606335Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Streams by Month\n\n# Group by released_month to see streams by month\nstreams_by_month = df.groupby('released_month')['streams'].sum()\n\n# Plot total streams by month\nplt.figure(figsize=(10,6))\nstreams_by_month.plot(kind='bar', color='green')\nplt.title('Total Streams by Month')\nplt.xlabel('Month')\nplt.ylabel('Total Streams')\nplt.xticks(rotation=45)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:32:04.19098Z","iopub.execute_input":"2024-10-15T19:32:04.191521Z","iopub.status.idle":"2024-10-15T19:32:04.542434Z","shell.execute_reply.started":"2024-10-15T19:32:04.191425Z","shell.execute_reply":"2024-10-15T19:32:04.541133Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Streams by Day\n\n# Group by released_day to see streams by day\nstreams_by_day = df.groupby('released_day')['streams'].sum()\n\n# Plot total streams by day\nplt.figure(figsize=(10,6))\nstreams_by_day.plot(kind='bar', color='blue')\nplt.title('Total Streams by Day of the Month')\nplt.xlabel('Day')\nplt.ylabel('Total Streams')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-15T19:32:07.217084Z","iopub.execute_input":"2024-10-15T19:32:07.217774Z","iopub.status.idle":"2024-10-15T19:32:07.732544Z","shell.execute_reply.started":"2024-10-15T19:32:07.217704Z","shell.execute_reply":"2024-10-15T19:32:07.731001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" **Summary of Insights**\n\n* Most Streamed Artists/Songs: You'll have a clear view of which is the top Artists and songs are most popular based on streams.\n* Feature Impact on Streams: By analyzing correlations and scatter plots, you can identify if features like danceability, energy, and valence significantly affect the number of streams.\n* Trends Over Time: The year, month, and day-based analyses will help you identify trends, like peak streaming months or years of high activity.","metadata":{}}]}